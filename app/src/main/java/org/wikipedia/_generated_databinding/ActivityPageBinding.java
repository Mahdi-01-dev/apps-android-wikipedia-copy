// Generated by view binder compiler. Do not edit!
package org.wikipedia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.drawerlayout.widget.FixedDrawerLayout;
import androidx.fragment.app.FragmentContainerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wikipedia.R;
import org.wikipedia.views.FrameLayoutNavMenuTriggerer;
import org.wikipedia.views.NotificationButtonView;
import org.wikipedia.views.PageScrollerView;
import org.wikipedia.views.SwipeableListView;
import org.wikipedia.views.TabCountsView;
import org.wikipedia.views.WikiArticleCardView;

public final class ActivityPageBinding implements ViewBinding {
  @NonNull
  private final FixedDrawerLayout rootView;

  @NonNull
  public final FrameLayoutNavMenuTriggerer containerWithNavTrigger;

  @NonNull
  public final FixedDrawerLayout navigationDrawer;

  @NonNull
  public final FragmentContainerView pageFragment;

  @NonNull
  public final LinearProgressIndicator pageProgressBar;

  @NonNull
  public final PageScrollerView pageScrollerButton;

  @NonNull
  public final MaterialToolbar pageToolbar;

  @NonNull
  public final NotificationButtonView pageToolbarButtonNotifications;

  @NonNull
  public final MaterialTextView pageToolbarButtonSearch;

  @NonNull
  public final ImageView pageToolbarButtonShowOverflowMenu;

  @NonNull
  public final TabCountsView pageToolbarButtonTabs;

  @NonNull
  public final FrameLayout pageToolbarContainer;

  @NonNull
  public final FrameLayout sidePanelContainer;

  @NonNull
  public final SwipeableListView tocList;

  @NonNull
  public final WikiArticleCardView wikiArticleCardView;

  private ActivityPageBinding(@NonNull FixedDrawerLayout rootView,
      @NonNull FrameLayoutNavMenuTriggerer containerWithNavTrigger,
      @NonNull FixedDrawerLayout navigationDrawer, @NonNull FragmentContainerView pageFragment,
      @NonNull LinearProgressIndicator pageProgressBar,
      @NonNull PageScrollerView pageScrollerButton, @NonNull MaterialToolbar pageToolbar,
      @NonNull NotificationButtonView pageToolbarButtonNotifications,
      @NonNull MaterialTextView pageToolbarButtonSearch,
      @NonNull ImageView pageToolbarButtonShowOverflowMenu,
      @NonNull TabCountsView pageToolbarButtonTabs, @NonNull FrameLayout pageToolbarContainer,
      @NonNull FrameLayout sidePanelContainer, @NonNull SwipeableListView tocList,
      @NonNull WikiArticleCardView wikiArticleCardView) {
    this.rootView = rootView;
    this.containerWithNavTrigger = containerWithNavTrigger;
    this.navigationDrawer = navigationDrawer;
    this.pageFragment = pageFragment;
    this.pageProgressBar = pageProgressBar;
    this.pageScrollerButton = pageScrollerButton;
    this.pageToolbar = pageToolbar;
    this.pageToolbarButtonNotifications = pageToolbarButtonNotifications;
    this.pageToolbarButtonSearch = pageToolbarButtonSearch;
    this.pageToolbarButtonShowOverflowMenu = pageToolbarButtonShowOverflowMenu;
    this.pageToolbarButtonTabs = pageToolbarButtonTabs;
    this.pageToolbarContainer = pageToolbarContainer;
    this.sidePanelContainer = sidePanelContainer;
    this.tocList = tocList;
    this.wikiArticleCardView = wikiArticleCardView;
  }

  @Override
  @NonNull
  public FixedDrawerLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_page, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.container_with_nav_trigger;
      FrameLayoutNavMenuTriggerer containerWithNavTrigger = ViewBindings.findChildViewById(rootView, id);
      if (containerWithNavTrigger == null) {
        break missingId;
      }

      FixedDrawerLayout navigationDrawer = (FixedDrawerLayout) rootView;

      id = R.id.page_fragment;
      FragmentContainerView pageFragment = ViewBindings.findChildViewById(rootView, id);
      if (pageFragment == null) {
        break missingId;
      }

      id = R.id.page_progress_bar;
      LinearProgressIndicator pageProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (pageProgressBar == null) {
        break missingId;
      }

      id = R.id.page_scroller_button;
      PageScrollerView pageScrollerButton = ViewBindings.findChildViewById(rootView, id);
      if (pageScrollerButton == null) {
        break missingId;
      }

      id = R.id.page_toolbar;
      MaterialToolbar pageToolbar = ViewBindings.findChildViewById(rootView, id);
      if (pageToolbar == null) {
        break missingId;
      }

      id = R.id.page_toolbar_button_notifications;
      NotificationButtonView pageToolbarButtonNotifications = ViewBindings.findChildViewById(rootView, id);
      if (pageToolbarButtonNotifications == null) {
        break missingId;
      }

      id = R.id.page_toolbar_button_search;
      MaterialTextView pageToolbarButtonSearch = ViewBindings.findChildViewById(rootView, id);
      if (pageToolbarButtonSearch == null) {
        break missingId;
      }

      id = R.id.page_toolbar_button_show_overflow_menu;
      ImageView pageToolbarButtonShowOverflowMenu = ViewBindings.findChildViewById(rootView, id);
      if (pageToolbarButtonShowOverflowMenu == null) {
        break missingId;
      }

      id = R.id.page_toolbar_button_tabs;
      TabCountsView pageToolbarButtonTabs = ViewBindings.findChildViewById(rootView, id);
      if (pageToolbarButtonTabs == null) {
        break missingId;
      }

      id = R.id.page_toolbar_container;
      FrameLayout pageToolbarContainer = ViewBindings.findChildViewById(rootView, id);
      if (pageToolbarContainer == null) {
        break missingId;
      }

      id = R.id.side_panel_container;
      FrameLayout sidePanelContainer = ViewBindings.findChildViewById(rootView, id);
      if (sidePanelContainer == null) {
        break missingId;
      }

      id = R.id.toc_list;
      SwipeableListView tocList = ViewBindings.findChildViewById(rootView, id);
      if (tocList == null) {
        break missingId;
      }

      id = R.id.wiki_article_card_view;
      WikiArticleCardView wikiArticleCardView = ViewBindings.findChildViewById(rootView, id);
      if (wikiArticleCardView == null) {
        break missingId;
      }

      return new ActivityPageBinding((FixedDrawerLayout) rootView, containerWithNavTrigger,
          navigationDrawer, pageFragment, pageProgressBar, pageScrollerButton, pageToolbar,
          pageToolbarButtonNotifications, pageToolbarButtonSearch,
          pageToolbarButtonShowOverflowMenu, pageToolbarButtonTabs, pageToolbarContainer,
          sidePanelContainer, tocList, wikiArticleCardView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
