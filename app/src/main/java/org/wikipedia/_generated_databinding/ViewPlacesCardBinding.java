// Generated by view binder compiler. Do not edit!
package org.wikipedia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.imageview.ShapeableImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wikipedia.R;
import org.wikipedia.feed.view.CardFooterView;
import org.wikipedia.feed.view.CardHeaderView;
import org.wikipedia.views.GoneIfEmptyTextView;
import org.wikipedia.views.WikiCardView;

public final class ViewPlacesCardBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CardFooterView cardFooter;

  @NonNull
  public final CardHeaderView cardHeader;

  @NonNull
  public final ConstraintLayout placesArticleContainer;

  @NonNull
  public final WikiCardView placesCardContainer;

  @NonNull
  public final GoneIfEmptyTextView placesCardDescription;

  @NonNull
  public final TextView placesCardDistance;

  @NonNull
  public final ShapeableImageView placesCardThumbnail;

  @NonNull
  public final TextView placesCardTitle;

  @NonNull
  public final Button placesEnableLocationButton;

  @NonNull
  public final LinearLayout placesEnableLocationContainer;

  private ViewPlacesCardBinding(@NonNull LinearLayout rootView, @NonNull CardFooterView cardFooter,
      @NonNull CardHeaderView cardHeader, @NonNull ConstraintLayout placesArticleContainer,
      @NonNull WikiCardView placesCardContainer, @NonNull GoneIfEmptyTextView placesCardDescription,
      @NonNull TextView placesCardDistance, @NonNull ShapeableImageView placesCardThumbnail,
      @NonNull TextView placesCardTitle, @NonNull Button placesEnableLocationButton,
      @NonNull LinearLayout placesEnableLocationContainer) {
    this.rootView = rootView;
    this.cardFooter = cardFooter;
    this.cardHeader = cardHeader;
    this.placesArticleContainer = placesArticleContainer;
    this.placesCardContainer = placesCardContainer;
    this.placesCardDescription = placesCardDescription;
    this.placesCardDistance = placesCardDistance;
    this.placesCardThumbnail = placesCardThumbnail;
    this.placesCardTitle = placesCardTitle;
    this.placesEnableLocationButton = placesEnableLocationButton;
    this.placesEnableLocationContainer = placesEnableLocationContainer;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewPlacesCardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewPlacesCardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_places_card, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewPlacesCardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.card_footer;
      CardFooterView cardFooter = ViewBindings.findChildViewById(rootView, id);
      if (cardFooter == null) {
        break missingId;
      }

      id = R.id.card_header;
      CardHeaderView cardHeader = ViewBindings.findChildViewById(rootView, id);
      if (cardHeader == null) {
        break missingId;
      }

      id = R.id.placesArticleContainer;
      ConstraintLayout placesArticleContainer = ViewBindings.findChildViewById(rootView, id);
      if (placesArticleContainer == null) {
        break missingId;
      }

      id = R.id.placesCardContainer;
      WikiCardView placesCardContainer = ViewBindings.findChildViewById(rootView, id);
      if (placesCardContainer == null) {
        break missingId;
      }

      id = R.id.placesCardDescription;
      GoneIfEmptyTextView placesCardDescription = ViewBindings.findChildViewById(rootView, id);
      if (placesCardDescription == null) {
        break missingId;
      }

      id = R.id.placesCardDistance;
      TextView placesCardDistance = ViewBindings.findChildViewById(rootView, id);
      if (placesCardDistance == null) {
        break missingId;
      }

      id = R.id.placesCardThumbnail;
      ShapeableImageView placesCardThumbnail = ViewBindings.findChildViewById(rootView, id);
      if (placesCardThumbnail == null) {
        break missingId;
      }

      id = R.id.placesCardTitle;
      TextView placesCardTitle = ViewBindings.findChildViewById(rootView, id);
      if (placesCardTitle == null) {
        break missingId;
      }

      id = R.id.placesEnableLocationButton;
      Button placesEnableLocationButton = ViewBindings.findChildViewById(rootView, id);
      if (placesEnableLocationButton == null) {
        break missingId;
      }

      id = R.id.placesEnableLocationContainer;
      LinearLayout placesEnableLocationContainer = ViewBindings.findChildViewById(rootView, id);
      if (placesEnableLocationContainer == null) {
        break missingId;
      }

      return new ViewPlacesCardBinding((LinearLayout) rootView, cardFooter, cardHeader,
          placesArticleContainer, placesCardContainer, placesCardDescription, placesCardDistance,
          placesCardThumbnail, placesCardTitle, placesEnableLocationButton,
          placesEnableLocationContainer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
