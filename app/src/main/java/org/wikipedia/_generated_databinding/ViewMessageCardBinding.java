// Generated by view binder compiler. Do not edit!
package org.wikipedia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.flexbox.FlexboxLayout;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wikipedia.R;

public final class ViewMessageCardBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final FlexboxLayout buttonsContainer;

  @NonNull
  public final LinearLayout containerClickArea;

  @NonNull
  public final ImageView imageView;

  @NonNull
  public final Chip messageLabel;

  @NonNull
  public final TextView messageTextView;

  @NonNull
  public final TextView messageTitleView;

  @NonNull
  public final MaterialButton negativeButton;

  @NonNull
  public final MaterialButton positiveButton;

  private ViewMessageCardBinding(@NonNull NestedScrollView rootView,
      @NonNull FlexboxLayout buttonsContainer, @NonNull LinearLayout containerClickArea,
      @NonNull ImageView imageView, @NonNull Chip messageLabel, @NonNull TextView messageTextView,
      @NonNull TextView messageTitleView, @NonNull MaterialButton negativeButton,
      @NonNull MaterialButton positiveButton) {
    this.rootView = rootView;
    this.buttonsContainer = buttonsContainer;
    this.containerClickArea = containerClickArea;
    this.imageView = imageView;
    this.messageLabel = messageLabel;
    this.messageTextView = messageTextView;
    this.messageTitleView = messageTitleView;
    this.negativeButton = negativeButton;
    this.positiveButton = positiveButton;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewMessageCardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewMessageCardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_message_card, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewMessageCardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonsContainer;
      FlexboxLayout buttonsContainer = ViewBindings.findChildViewById(rootView, id);
      if (buttonsContainer == null) {
        break missingId;
      }

      id = R.id.containerClickArea;
      LinearLayout containerClickArea = ViewBindings.findChildViewById(rootView, id);
      if (containerClickArea == null) {
        break missingId;
      }

      id = R.id.imageView;
      ImageView imageView = ViewBindings.findChildViewById(rootView, id);
      if (imageView == null) {
        break missingId;
      }

      id = R.id.messageLabel;
      Chip messageLabel = ViewBindings.findChildViewById(rootView, id);
      if (messageLabel == null) {
        break missingId;
      }

      id = R.id.messageTextView;
      TextView messageTextView = ViewBindings.findChildViewById(rootView, id);
      if (messageTextView == null) {
        break missingId;
      }

      id = R.id.messageTitleView;
      TextView messageTitleView = ViewBindings.findChildViewById(rootView, id);
      if (messageTitleView == null) {
        break missingId;
      }

      id = R.id.negativeButton;
      MaterialButton negativeButton = ViewBindings.findChildViewById(rootView, id);
      if (negativeButton == null) {
        break missingId;
      }

      id = R.id.positiveButton;
      MaterialButton positiveButton = ViewBindings.findChildViewById(rootView, id);
      if (positiveButton == null) {
        break missingId;
      }

      return new ViewMessageCardBinding((NestedScrollView) rootView, buttonsContainer,
          containerClickArea, imageView, messageLabel, messageTextView, messageTitleView,
          negativeButton, positiveButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
