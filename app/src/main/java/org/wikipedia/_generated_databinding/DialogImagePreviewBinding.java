// Generated by view binder compiler. Do not edit!
package org.wikipedia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wikipedia.R;
import org.wikipedia.commons.FilePageView;
import org.wikipedia.page.linkpreview.LinkPreviewErrorView;

public final class DialogImagePreviewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout dialogDetailContainer;

  @NonNull
  public final ImageView downChevron;

  @NonNull
  public final LinkPreviewErrorView errorView;

  @NonNull
  public final FilePageView filePageView;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final TextView titleText;

  @NonNull
  public final LinearLayout toolbarView;

  private DialogImagePreviewBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout dialogDetailContainer, @NonNull ImageView downChevron,
      @NonNull LinkPreviewErrorView errorView, @NonNull FilePageView filePageView,
      @NonNull ProgressBar progressBar, @NonNull TextView titleText,
      @NonNull LinearLayout toolbarView) {
    this.rootView = rootView;
    this.dialogDetailContainer = dialogDetailContainer;
    this.downChevron = downChevron;
    this.errorView = errorView;
    this.filePageView = filePageView;
    this.progressBar = progressBar;
    this.titleText = titleText;
    this.toolbarView = toolbarView;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogImagePreviewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogImagePreviewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_image_preview, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogImagePreviewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dialogDetailContainer;
      LinearLayout dialogDetailContainer = ViewBindings.findChildViewById(rootView, id);
      if (dialogDetailContainer == null) {
        break missingId;
      }

      id = R.id.downChevron;
      ImageView downChevron = ViewBindings.findChildViewById(rootView, id);
      if (downChevron == null) {
        break missingId;
      }

      id = R.id.errorView;
      LinkPreviewErrorView errorView = ViewBindings.findChildViewById(rootView, id);
      if (errorView == null) {
        break missingId;
      }

      id = R.id.filePageView;
      FilePageView filePageView = ViewBindings.findChildViewById(rootView, id);
      if (filePageView == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.titleText;
      TextView titleText = ViewBindings.findChildViewById(rootView, id);
      if (titleText == null) {
        break missingId;
      }

      id = R.id.toolbarView;
      LinearLayout toolbarView = ViewBindings.findChildViewById(rootView, id);
      if (toolbarView == null) {
        break missingId;
      }

      return new DialogImagePreviewBinding((LinearLayout) rootView, dialogDetailContainer,
          downChevron, errorView, filePageView, progressBar, titleText, toolbarView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
