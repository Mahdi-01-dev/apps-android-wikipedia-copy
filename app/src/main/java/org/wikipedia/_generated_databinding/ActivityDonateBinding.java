// Generated by view binder compiler. Do not edit!
package org.wikipedia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.FrameLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.helper.widget.Flow;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.gms.wallet.button.PayButton;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wikipedia.R;
import org.wikipedia.views.WikiErrorView;

public final class ActivityDonateBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final ConstraintLayout amountPresetsContainer;

  @NonNull
  public final Flow amountPresetsFlow;

  @NonNull
  public final CheckBox checkBoxAllowEmail;

  @NonNull
  public final CheckBox checkBoxRecurring;

  @NonNull
  public final CheckBox checkBoxTransactionFee;

  @NonNull
  public final ScrollView contentsContainer;

  @NonNull
  public final TextView disclaimerText1;

  @NonNull
  public final TextView disclaimerText2;

  @NonNull
  public final TextInputLayout donateAmountInput;

  @NonNull
  public final TextInputEditText donateAmountText;

  @NonNull
  public final WikiErrorView errorView;

  @NonNull
  public final TextView linkFAQ;

  @NonNull
  public final TextView linkOtherWays;

  @NonNull
  public final TextView linkProblemsDonating;

  @NonNull
  public final TextView linkTaxDeduct;

  @NonNull
  public final PayButton payButton;

  @NonNull
  public final LinearProgressIndicator progressBar;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivityDonateBinding(@NonNull FrameLayout rootView,
      @NonNull ConstraintLayout amountPresetsContainer, @NonNull Flow amountPresetsFlow,
      @NonNull CheckBox checkBoxAllowEmail, @NonNull CheckBox checkBoxRecurring,
      @NonNull CheckBox checkBoxTransactionFee, @NonNull ScrollView contentsContainer,
      @NonNull TextView disclaimerText1, @NonNull TextView disclaimerText2,
      @NonNull TextInputLayout donateAmountInput, @NonNull TextInputEditText donateAmountText,
      @NonNull WikiErrorView errorView, @NonNull TextView linkFAQ, @NonNull TextView linkOtherWays,
      @NonNull TextView linkProblemsDonating, @NonNull TextView linkTaxDeduct,
      @NonNull PayButton payButton, @NonNull LinearProgressIndicator progressBar,
      @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.amountPresetsContainer = amountPresetsContainer;
    this.amountPresetsFlow = amountPresetsFlow;
    this.checkBoxAllowEmail = checkBoxAllowEmail;
    this.checkBoxRecurring = checkBoxRecurring;
    this.checkBoxTransactionFee = checkBoxTransactionFee;
    this.contentsContainer = contentsContainer;
    this.disclaimerText1 = disclaimerText1;
    this.disclaimerText2 = disclaimerText2;
    this.donateAmountInput = donateAmountInput;
    this.donateAmountText = donateAmountText;
    this.errorView = errorView;
    this.linkFAQ = linkFAQ;
    this.linkOtherWays = linkOtherWays;
    this.linkProblemsDonating = linkProblemsDonating;
    this.linkTaxDeduct = linkTaxDeduct;
    this.payButton = payButton;
    this.progressBar = progressBar;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDonateBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDonateBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_donate, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDonateBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.amountPresetsContainer;
      ConstraintLayout amountPresetsContainer = ViewBindings.findChildViewById(rootView, id);
      if (amountPresetsContainer == null) {
        break missingId;
      }

      id = R.id.amountPresetsFlow;
      Flow amountPresetsFlow = ViewBindings.findChildViewById(rootView, id);
      if (amountPresetsFlow == null) {
        break missingId;
      }

      id = R.id.checkBoxAllowEmail;
      CheckBox checkBoxAllowEmail = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxAllowEmail == null) {
        break missingId;
      }

      id = R.id.checkBoxRecurring;
      CheckBox checkBoxRecurring = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxRecurring == null) {
        break missingId;
      }

      id = R.id.checkBoxTransactionFee;
      CheckBox checkBoxTransactionFee = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxTransactionFee == null) {
        break missingId;
      }

      id = R.id.contentsContainer;
      ScrollView contentsContainer = ViewBindings.findChildViewById(rootView, id);
      if (contentsContainer == null) {
        break missingId;
      }

      id = R.id.disclaimerText1;
      TextView disclaimerText1 = ViewBindings.findChildViewById(rootView, id);
      if (disclaimerText1 == null) {
        break missingId;
      }

      id = R.id.disclaimerText2;
      TextView disclaimerText2 = ViewBindings.findChildViewById(rootView, id);
      if (disclaimerText2 == null) {
        break missingId;
      }

      id = R.id.donateAmountInput;
      TextInputLayout donateAmountInput = ViewBindings.findChildViewById(rootView, id);
      if (donateAmountInput == null) {
        break missingId;
      }

      id = R.id.donateAmountText;
      TextInputEditText donateAmountText = ViewBindings.findChildViewById(rootView, id);
      if (donateAmountText == null) {
        break missingId;
      }

      id = R.id.errorView;
      WikiErrorView errorView = ViewBindings.findChildViewById(rootView, id);
      if (errorView == null) {
        break missingId;
      }

      id = R.id.linkFAQ;
      TextView linkFAQ = ViewBindings.findChildViewById(rootView, id);
      if (linkFAQ == null) {
        break missingId;
      }

      id = R.id.linkOtherWays;
      TextView linkOtherWays = ViewBindings.findChildViewById(rootView, id);
      if (linkOtherWays == null) {
        break missingId;
      }

      id = R.id.linkProblemsDonating;
      TextView linkProblemsDonating = ViewBindings.findChildViewById(rootView, id);
      if (linkProblemsDonating == null) {
        break missingId;
      }

      id = R.id.linkTaxDeduct;
      TextView linkTaxDeduct = ViewBindings.findChildViewById(rootView, id);
      if (linkTaxDeduct == null) {
        break missingId;
      }

      id = R.id.payButton;
      PayButton payButton = ViewBindings.findChildViewById(rootView, id);
      if (payButton == null) {
        break missingId;
      }

      id = R.id.progressBar;
      LinearProgressIndicator progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityDonateBinding((FrameLayout) rootView, amountPresetsContainer,
          amountPresetsFlow, checkBoxAllowEmail, checkBoxRecurring, checkBoxTransactionFee,
          contentsContainer, disclaimerText1, disclaimerText2, donateAmountInput, donateAmountText,
          errorView, linkFAQ, linkOtherWays, linkProblemsDonating, linkTaxDeduct, payButton,
          progressBar, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
