// Generated by view binder compiler. Do not edit!
package org.wikipedia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wikipedia.R;

public final class ViewImageDetailBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton actionButton;

  @NonNull
  public final LinearLayout contentContainer;

  @NonNull
  public final TextView contentText;

  @NonNull
  public final View divider;

  @NonNull
  public final ImageView editButton;

  @NonNull
  public final ImageView externalLink;

  @NonNull
  public final LinearLayout titleContainer;

  @NonNull
  public final TextView titleText;

  private ViewImageDetailBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton actionButton, @NonNull LinearLayout contentContainer,
      @NonNull TextView contentText, @NonNull View divider, @NonNull ImageView editButton,
      @NonNull ImageView externalLink, @NonNull LinearLayout titleContainer,
      @NonNull TextView titleText) {
    this.rootView = rootView;
    this.actionButton = actionButton;
    this.contentContainer = contentContainer;
    this.contentText = contentText;
    this.divider = divider;
    this.editButton = editButton;
    this.externalLink = externalLink;
    this.titleContainer = titleContainer;
    this.titleText = titleText;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewImageDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewImageDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_image_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewImageDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.actionButton;
      MaterialButton actionButton = ViewBindings.findChildViewById(rootView, id);
      if (actionButton == null) {
        break missingId;
      }

      id = R.id.contentContainer;
      LinearLayout contentContainer = ViewBindings.findChildViewById(rootView, id);
      if (contentContainer == null) {
        break missingId;
      }

      id = R.id.contentText;
      TextView contentText = ViewBindings.findChildViewById(rootView, id);
      if (contentText == null) {
        break missingId;
      }

      id = R.id.divider;
      View divider = ViewBindings.findChildViewById(rootView, id);
      if (divider == null) {
        break missingId;
      }

      id = R.id.editButton;
      ImageView editButton = ViewBindings.findChildViewById(rootView, id);
      if (editButton == null) {
        break missingId;
      }

      id = R.id.externalLink;
      ImageView externalLink = ViewBindings.findChildViewById(rootView, id);
      if (externalLink == null) {
        break missingId;
      }

      id = R.id.titleContainer;
      LinearLayout titleContainer = ViewBindings.findChildViewById(rootView, id);
      if (titleContainer == null) {
        break missingId;
      }

      id = R.id.titleText;
      TextView titleText = ViewBindings.findChildViewById(rootView, id);
      if (titleText == null) {
        break missingId;
      }

      return new ViewImageDetailBinding((LinearLayout) rootView, actionButton, contentContainer,
          contentText, divider, editButton, externalLink, titleContainer, titleText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
