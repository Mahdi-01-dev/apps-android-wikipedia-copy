// Generated by view binder compiler. Do not edit!
package org.wikipedia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wikipedia.R;

public final class ItemTalkThreadItemBinding implements ViewBinding {
  @NonNull
  private final View rootView;

  @NonNull
  public final TextView bodyText;

  @NonNull
  public final ImageView overflowButton;

  @NonNull
  public final ImageView profileImage;

  @NonNull
  public final MaterialButton replyButton;

  @NonNull
  public final ImageView showRepliesArrow;

  @NonNull
  public final LinearLayout showRepliesContainer;

  @NonNull
  public final View showRepliesTapTarget;

  @NonNull
  public final TextView showRepliesText;

  @NonNull
  public final View threadLineBottom;

  @NonNull
  public final View threadLineMiddle;

  @NonNull
  public final View threadLineTop;

  @NonNull
  public final TextView timeStampText;

  @NonNull
  public final View topDivider;

  @NonNull
  public final View userNameTapTarget;

  @NonNull
  public final TextView userNameText;

  private ItemTalkThreadItemBinding(@NonNull View rootView, @NonNull TextView bodyText,
      @NonNull ImageView overflowButton, @NonNull ImageView profileImage,
      @NonNull MaterialButton replyButton, @NonNull ImageView showRepliesArrow,
      @NonNull LinearLayout showRepliesContainer, @NonNull View showRepliesTapTarget,
      @NonNull TextView showRepliesText, @NonNull View threadLineBottom,
      @NonNull View threadLineMiddle, @NonNull View threadLineTop, @NonNull TextView timeStampText,
      @NonNull View topDivider, @NonNull View userNameTapTarget, @NonNull TextView userNameText) {
    this.rootView = rootView;
    this.bodyText = bodyText;
    this.overflowButton = overflowButton;
    this.profileImage = profileImage;
    this.replyButton = replyButton;
    this.showRepliesArrow = showRepliesArrow;
    this.showRepliesContainer = showRepliesContainer;
    this.showRepliesTapTarget = showRepliesTapTarget;
    this.showRepliesText = showRepliesText;
    this.threadLineBottom = threadLineBottom;
    this.threadLineMiddle = threadLineMiddle;
    this.threadLineTop = threadLineTop;
    this.timeStampText = timeStampText;
    this.topDivider = topDivider;
    this.userNameTapTarget = userNameTapTarget;
    this.userNameText = userNameText;
  }

  @Override
  @NonNull
  public View getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemTalkThreadItemBinding inflate(@NonNull LayoutInflater inflater,
      @NonNull ViewGroup parent) {
    if (parent == null) {
      throw new NullPointerException("parent");
    }
    inflater.inflate(R.layout.item_talk_thread_item, parent);
    return bind(parent);
  }

  @NonNull
  public static ItemTalkThreadItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bodyText;
      TextView bodyText = ViewBindings.findChildViewById(rootView, id);
      if (bodyText == null) {
        break missingId;
      }

      id = R.id.overflowButton;
      ImageView overflowButton = ViewBindings.findChildViewById(rootView, id);
      if (overflowButton == null) {
        break missingId;
      }

      id = R.id.profileImage;
      ImageView profileImage = ViewBindings.findChildViewById(rootView, id);
      if (profileImage == null) {
        break missingId;
      }

      id = R.id.replyButton;
      MaterialButton replyButton = ViewBindings.findChildViewById(rootView, id);
      if (replyButton == null) {
        break missingId;
      }

      id = R.id.showRepliesArrow;
      ImageView showRepliesArrow = ViewBindings.findChildViewById(rootView, id);
      if (showRepliesArrow == null) {
        break missingId;
      }

      id = R.id.showRepliesContainer;
      LinearLayout showRepliesContainer = ViewBindings.findChildViewById(rootView, id);
      if (showRepliesContainer == null) {
        break missingId;
      }

      id = R.id.showRepliesTapTarget;
      View showRepliesTapTarget = ViewBindings.findChildViewById(rootView, id);
      if (showRepliesTapTarget == null) {
        break missingId;
      }

      id = R.id.showRepliesText;
      TextView showRepliesText = ViewBindings.findChildViewById(rootView, id);
      if (showRepliesText == null) {
        break missingId;
      }

      id = R.id.threadLineBottom;
      View threadLineBottom = ViewBindings.findChildViewById(rootView, id);
      if (threadLineBottom == null) {
        break missingId;
      }

      id = R.id.threadLineMiddle;
      View threadLineMiddle = ViewBindings.findChildViewById(rootView, id);
      if (threadLineMiddle == null) {
        break missingId;
      }

      id = R.id.threadLineTop;
      View threadLineTop = ViewBindings.findChildViewById(rootView, id);
      if (threadLineTop == null) {
        break missingId;
      }

      id = R.id.timeStampText;
      TextView timeStampText = ViewBindings.findChildViewById(rootView, id);
      if (timeStampText == null) {
        break missingId;
      }

      id = R.id.topDivider;
      View topDivider = ViewBindings.findChildViewById(rootView, id);
      if (topDivider == null) {
        break missingId;
      }

      id = R.id.userNameTapTarget;
      View userNameTapTarget = ViewBindings.findChildViewById(rootView, id);
      if (userNameTapTarget == null) {
        break missingId;
      }

      id = R.id.userNameText;
      TextView userNameText = ViewBindings.findChildViewById(rootView, id);
      if (userNameText == null) {
        break missingId;
      }

      return new ItemTalkThreadItemBinding(rootView, bodyText, overflowButton, profileImage,
          replyButton, showRepliesArrow, showRepliesContainer, showRepliesTapTarget,
          showRepliesText, threadLineBottom, threadLineMiddle, threadLineTop, timeStampText,
          topDivider, userNameTapTarget, userNameText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
