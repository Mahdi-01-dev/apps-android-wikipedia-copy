// Generated by view binder compiler. Do not edit!
package org.wikipedia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.materialswitch.MaterialSwitch;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wikipedia.R;
import org.wikipedia.views.DiscreteSeekBar;

public final class DialogThemeChooserBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final TextView buttonDecreaseTextSize;

  @NonNull
  public final MaterialButton buttonFontFamilySansSerif;

  @NonNull
  public final MaterialButton buttonFontFamilySerif;

  @NonNull
  public final TextView buttonIncreaseTextSize;

  @NonNull
  public final MaterialButton buttonThemeBlack;

  @NonNull
  public final MaterialButton buttonThemeDark;

  @NonNull
  public final MaterialButton buttonThemeLight;

  @NonNull
  public final MaterialButton buttonThemeSepia;

  @NonNull
  public final ProgressBar fontChangeProgressBar;

  @NonNull
  public final LinearLayout fontFamilyContainer;

  @NonNull
  public final MaterialSwitch monospaceFontSwitch;

  @NonNull
  public final LinearLayout readingFocusModeContainer;

  @NonNull
  public final MaterialSwitch showLineNumbersSwitch;

  @NonNull
  public final MaterialSwitch syntaxHighlightSwitch;

  @NonNull
  public final TextView textSettingsCategory;

  @NonNull
  public final TextView textSizePercent;

  @NonNull
  public final DiscreteSeekBar textSizeSeekBar;

  @NonNull
  public final MaterialSwitch themeChooserDarkModeDimImagesSwitch;

  @NonNull
  public final MaterialSwitch themeChooserMatchSystemThemeSwitch;

  @NonNull
  public final TextView themeChooserReadingFocusModeDescription;

  @NonNull
  public final MaterialSwitch themeChooserReadingFocusModeSwitch;

  @NonNull
  public final MaterialSwitch typingSuggestionsSwitch;

  private DialogThemeChooserBinding(@NonNull FrameLayout rootView,
      @NonNull TextView buttonDecreaseTextSize, @NonNull MaterialButton buttonFontFamilySansSerif,
      @NonNull MaterialButton buttonFontFamilySerif, @NonNull TextView buttonIncreaseTextSize,
      @NonNull MaterialButton buttonThemeBlack, @NonNull MaterialButton buttonThemeDark,
      @NonNull MaterialButton buttonThemeLight, @NonNull MaterialButton buttonThemeSepia,
      @NonNull ProgressBar fontChangeProgressBar, @NonNull LinearLayout fontFamilyContainer,
      @NonNull MaterialSwitch monospaceFontSwitch, @NonNull LinearLayout readingFocusModeContainer,
      @NonNull MaterialSwitch showLineNumbersSwitch, @NonNull MaterialSwitch syntaxHighlightSwitch,
      @NonNull TextView textSettingsCategory, @NonNull TextView textSizePercent,
      @NonNull DiscreteSeekBar textSizeSeekBar,
      @NonNull MaterialSwitch themeChooserDarkModeDimImagesSwitch,
      @NonNull MaterialSwitch themeChooserMatchSystemThemeSwitch,
      @NonNull TextView themeChooserReadingFocusModeDescription,
      @NonNull MaterialSwitch themeChooserReadingFocusModeSwitch,
      @NonNull MaterialSwitch typingSuggestionsSwitch) {
    this.rootView = rootView;
    this.buttonDecreaseTextSize = buttonDecreaseTextSize;
    this.buttonFontFamilySansSerif = buttonFontFamilySansSerif;
    this.buttonFontFamilySerif = buttonFontFamilySerif;
    this.buttonIncreaseTextSize = buttonIncreaseTextSize;
    this.buttonThemeBlack = buttonThemeBlack;
    this.buttonThemeDark = buttonThemeDark;
    this.buttonThemeLight = buttonThemeLight;
    this.buttonThemeSepia = buttonThemeSepia;
    this.fontChangeProgressBar = fontChangeProgressBar;
    this.fontFamilyContainer = fontFamilyContainer;
    this.monospaceFontSwitch = monospaceFontSwitch;
    this.readingFocusModeContainer = readingFocusModeContainer;
    this.showLineNumbersSwitch = showLineNumbersSwitch;
    this.syntaxHighlightSwitch = syntaxHighlightSwitch;
    this.textSettingsCategory = textSettingsCategory;
    this.textSizePercent = textSizePercent;
    this.textSizeSeekBar = textSizeSeekBar;
    this.themeChooserDarkModeDimImagesSwitch = themeChooserDarkModeDimImagesSwitch;
    this.themeChooserMatchSystemThemeSwitch = themeChooserMatchSystemThemeSwitch;
    this.themeChooserReadingFocusModeDescription = themeChooserReadingFocusModeDescription;
    this.themeChooserReadingFocusModeSwitch = themeChooserReadingFocusModeSwitch;
    this.typingSuggestionsSwitch = typingSuggestionsSwitch;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogThemeChooserBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogThemeChooserBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_theme_chooser, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogThemeChooserBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonDecreaseTextSize;
      TextView buttonDecreaseTextSize = ViewBindings.findChildViewById(rootView, id);
      if (buttonDecreaseTextSize == null) {
        break missingId;
      }

      id = R.id.button_font_family_sans_serif;
      MaterialButton buttonFontFamilySansSerif = ViewBindings.findChildViewById(rootView, id);
      if (buttonFontFamilySansSerif == null) {
        break missingId;
      }

      id = R.id.button_font_family_serif;
      MaterialButton buttonFontFamilySerif = ViewBindings.findChildViewById(rootView, id);
      if (buttonFontFamilySerif == null) {
        break missingId;
      }

      id = R.id.buttonIncreaseTextSize;
      TextView buttonIncreaseTextSize = ViewBindings.findChildViewById(rootView, id);
      if (buttonIncreaseTextSize == null) {
        break missingId;
      }

      id = R.id.button_theme_black;
      MaterialButton buttonThemeBlack = ViewBindings.findChildViewById(rootView, id);
      if (buttonThemeBlack == null) {
        break missingId;
      }

      id = R.id.button_theme_dark;
      MaterialButton buttonThemeDark = ViewBindings.findChildViewById(rootView, id);
      if (buttonThemeDark == null) {
        break missingId;
      }

      id = R.id.button_theme_light;
      MaterialButton buttonThemeLight = ViewBindings.findChildViewById(rootView, id);
      if (buttonThemeLight == null) {
        break missingId;
      }

      id = R.id.button_theme_sepia;
      MaterialButton buttonThemeSepia = ViewBindings.findChildViewById(rootView, id);
      if (buttonThemeSepia == null) {
        break missingId;
      }

      id = R.id.font_change_progress_bar;
      ProgressBar fontChangeProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (fontChangeProgressBar == null) {
        break missingId;
      }

      id = R.id.fontFamilyContainer;
      LinearLayout fontFamilyContainer = ViewBindings.findChildViewById(rootView, id);
      if (fontFamilyContainer == null) {
        break missingId;
      }

      id = R.id.monospace_font_switch;
      MaterialSwitch monospaceFontSwitch = ViewBindings.findChildViewById(rootView, id);
      if (monospaceFontSwitch == null) {
        break missingId;
      }

      id = R.id.readingFocusModeContainer;
      LinearLayout readingFocusModeContainer = ViewBindings.findChildViewById(rootView, id);
      if (readingFocusModeContainer == null) {
        break missingId;
      }

      id = R.id.show_line_numbers_switch;
      MaterialSwitch showLineNumbersSwitch = ViewBindings.findChildViewById(rootView, id);
      if (showLineNumbersSwitch == null) {
        break missingId;
      }

      id = R.id.syntax_highlight_switch;
      MaterialSwitch syntaxHighlightSwitch = ViewBindings.findChildViewById(rootView, id);
      if (syntaxHighlightSwitch == null) {
        break missingId;
      }

      id = R.id.textSettingsCategory;
      TextView textSettingsCategory = ViewBindings.findChildViewById(rootView, id);
      if (textSettingsCategory == null) {
        break missingId;
      }

      id = R.id.text_size_percent;
      TextView textSizePercent = ViewBindings.findChildViewById(rootView, id);
      if (textSizePercent == null) {
        break missingId;
      }

      id = R.id.text_size_seek_bar;
      DiscreteSeekBar textSizeSeekBar = ViewBindings.findChildViewById(rootView, id);
      if (textSizeSeekBar == null) {
        break missingId;
      }

      id = R.id.theme_chooser_dark_mode_dim_images_switch;
      MaterialSwitch themeChooserDarkModeDimImagesSwitch = ViewBindings.findChildViewById(rootView, id);
      if (themeChooserDarkModeDimImagesSwitch == null) {
        break missingId;
      }

      id = R.id.theme_chooser_match_system_theme_switch;
      MaterialSwitch themeChooserMatchSystemThemeSwitch = ViewBindings.findChildViewById(rootView, id);
      if (themeChooserMatchSystemThemeSwitch == null) {
        break missingId;
      }

      id = R.id.theme_chooser_reading_focus_mode_description;
      TextView themeChooserReadingFocusModeDescription = ViewBindings.findChildViewById(rootView, id);
      if (themeChooserReadingFocusModeDescription == null) {
        break missingId;
      }

      id = R.id.theme_chooser_reading_focus_mode_switch;
      MaterialSwitch themeChooserReadingFocusModeSwitch = ViewBindings.findChildViewById(rootView, id);
      if (themeChooserReadingFocusModeSwitch == null) {
        break missingId;
      }

      id = R.id.typing_suggestions_switch;
      MaterialSwitch typingSuggestionsSwitch = ViewBindings.findChildViewById(rootView, id);
      if (typingSuggestionsSwitch == null) {
        break missingId;
      }

      return new DialogThemeChooserBinding((FrameLayout) rootView, buttonDecreaseTextSize,
          buttonFontFamilySansSerif, buttonFontFamilySerif, buttonIncreaseTextSize,
          buttonThemeBlack, buttonThemeDark, buttonThemeLight, buttonThemeSepia,
          fontChangeProgressBar, fontFamilyContainer, monospaceFontSwitch,
          readingFocusModeContainer, showLineNumbersSwitch, syntaxHighlightSwitch,
          textSettingsCategory, textSizePercent, textSizeSeekBar,
          themeChooserDarkModeDimImagesSwitch, themeChooserMatchSystemThemeSwitch,
          themeChooserReadingFocusModeDescription, themeChooserReadingFocusModeSwitch,
          typingSuggestionsSwitch);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
