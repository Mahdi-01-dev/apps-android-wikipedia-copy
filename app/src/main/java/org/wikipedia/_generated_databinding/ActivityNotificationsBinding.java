// Generated by view binder compiler. Do not edit!
package org.wikipedia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.tabs.TabLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wikipedia.R;
import org.wikipedia.views.WikiErrorView;
import org.wikipedia.views.WikiSwipeRefreshLayout;

public final class ActivityNotificationsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final TabLayout notificationTabLayout;

  @NonNull
  public final CoordinatorLayout notificationsCoordinatorLayout;

  @NonNull
  public final LinearLayout notificationsEmptyContainer;

  @NonNull
  public final TextView notificationsEmptySearchMessage;

  @NonNull
  public final WikiErrorView notificationsErrorView;

  @NonNull
  public final ProgressBar notificationsProgressBar;

  @NonNull
  public final RecyclerView notificationsRecyclerView;

  @NonNull
  public final WikiSwipeRefreshLayout notificationsRefreshView;

  @NonNull
  public final LinearLayout notificationsSearchEmptyContainer;

  @NonNull
  public final TextView notificationsSearchEmptyText;

  @NonNull
  public final MaterialToolbar notificationsToolbar;

  @NonNull
  public final AppBarLayout notificationsToolbarContainer;

  private ActivityNotificationsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull TabLayout notificationTabLayout,
      @NonNull CoordinatorLayout notificationsCoordinatorLayout,
      @NonNull LinearLayout notificationsEmptyContainer,
      @NonNull TextView notificationsEmptySearchMessage,
      @NonNull WikiErrorView notificationsErrorView, @NonNull ProgressBar notificationsProgressBar,
      @NonNull RecyclerView notificationsRecyclerView,
      @NonNull WikiSwipeRefreshLayout notificationsRefreshView,
      @NonNull LinearLayout notificationsSearchEmptyContainer,
      @NonNull TextView notificationsSearchEmptyText, @NonNull MaterialToolbar notificationsToolbar,
      @NonNull AppBarLayout notificationsToolbarContainer) {
    this.rootView = rootView;
    this.notificationTabLayout = notificationTabLayout;
    this.notificationsCoordinatorLayout = notificationsCoordinatorLayout;
    this.notificationsEmptyContainer = notificationsEmptyContainer;
    this.notificationsEmptySearchMessage = notificationsEmptySearchMessage;
    this.notificationsErrorView = notificationsErrorView;
    this.notificationsProgressBar = notificationsProgressBar;
    this.notificationsRecyclerView = notificationsRecyclerView;
    this.notificationsRefreshView = notificationsRefreshView;
    this.notificationsSearchEmptyContainer = notificationsSearchEmptyContainer;
    this.notificationsSearchEmptyText = notificationsSearchEmptyText;
    this.notificationsToolbar = notificationsToolbar;
    this.notificationsToolbarContainer = notificationsToolbarContainer;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityNotificationsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityNotificationsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_notifications, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityNotificationsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.notification_tab_layout;
      TabLayout notificationTabLayout = ViewBindings.findChildViewById(rootView, id);
      if (notificationTabLayout == null) {
        break missingId;
      }

      CoordinatorLayout notificationsCoordinatorLayout = (CoordinatorLayout) rootView;

      id = R.id.notifications_empty_container;
      LinearLayout notificationsEmptyContainer = ViewBindings.findChildViewById(rootView, id);
      if (notificationsEmptyContainer == null) {
        break missingId;
      }

      id = R.id.notifications_empty_search_message;
      TextView notificationsEmptySearchMessage = ViewBindings.findChildViewById(rootView, id);
      if (notificationsEmptySearchMessage == null) {
        break missingId;
      }

      id = R.id.notifications_error_view;
      WikiErrorView notificationsErrorView = ViewBindings.findChildViewById(rootView, id);
      if (notificationsErrorView == null) {
        break missingId;
      }

      id = R.id.notifications_progress_bar;
      ProgressBar notificationsProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (notificationsProgressBar == null) {
        break missingId;
      }

      id = R.id.notifications_recycler_view;
      RecyclerView notificationsRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (notificationsRecyclerView == null) {
        break missingId;
      }

      id = R.id.notifications_refresh_view;
      WikiSwipeRefreshLayout notificationsRefreshView = ViewBindings.findChildViewById(rootView, id);
      if (notificationsRefreshView == null) {
        break missingId;
      }

      id = R.id.notifications_search_empty_container;
      LinearLayout notificationsSearchEmptyContainer = ViewBindings.findChildViewById(rootView, id);
      if (notificationsSearchEmptyContainer == null) {
        break missingId;
      }

      id = R.id.notifications_search_empty_text;
      TextView notificationsSearchEmptyText = ViewBindings.findChildViewById(rootView, id);
      if (notificationsSearchEmptyText == null) {
        break missingId;
      }

      id = R.id.notifications_toolbar;
      MaterialToolbar notificationsToolbar = ViewBindings.findChildViewById(rootView, id);
      if (notificationsToolbar == null) {
        break missingId;
      }

      id = R.id.notifications_toolbar_container;
      AppBarLayout notificationsToolbarContainer = ViewBindings.findChildViewById(rootView, id);
      if (notificationsToolbarContainer == null) {
        break missingId;
      }

      return new ActivityNotificationsBinding((CoordinatorLayout) rootView, notificationTabLayout,
          notificationsCoordinatorLayout, notificationsEmptyContainer,
          notificationsEmptySearchMessage, notificationsErrorView, notificationsProgressBar,
          notificationsRecyclerView, notificationsRefreshView, notificationsSearchEmptyContainer,
          notificationsSearchEmptyText, notificationsToolbar, notificationsToolbarContainer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
