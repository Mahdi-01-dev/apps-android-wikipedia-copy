// Generated by view binder compiler. Do not edit!
package org.wikipedia.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.wikipedia.R;

public final class ViewHistoryHeaderWithSearchBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView historyDelete;

  @NonNull
  public final ImageView historyFilter;

  @NonNull
  public final TextView historyTitle;

  @NonNull
  public final ViewSearchBarBinding searchCard;

  private ViewHistoryHeaderWithSearchBinding(@NonNull LinearLayout rootView,
      @NonNull ImageView historyDelete, @NonNull ImageView historyFilter,
      @NonNull TextView historyTitle, @NonNull ViewSearchBarBinding searchCard) {
    this.rootView = rootView;
    this.historyDelete = historyDelete;
    this.historyFilter = historyFilter;
    this.historyTitle = historyTitle;
    this.searchCard = searchCard;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewHistoryHeaderWithSearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewHistoryHeaderWithSearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.view_history_header_with_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewHistoryHeaderWithSearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.history_delete;
      ImageView historyDelete = ViewBindings.findChildViewById(rootView, id);
      if (historyDelete == null) {
        break missingId;
      }

      id = R.id.history_filter;
      ImageView historyFilter = ViewBindings.findChildViewById(rootView, id);
      if (historyFilter == null) {
        break missingId;
      }

      id = R.id.history_title;
      TextView historyTitle = ViewBindings.findChildViewById(rootView, id);
      if (historyTitle == null) {
        break missingId;
      }

      id = R.id.search_card;
      View searchCard = ViewBindings.findChildViewById(rootView, id);
      if (searchCard == null) {
        break missingId;
      }
      ViewSearchBarBinding binding_searchCard = ViewSearchBarBinding.bind(searchCard);

      return new ViewHistoryHeaderWithSearchBinding((LinearLayout) rootView, historyDelete,
          historyFilter, historyTitle, binding_searchCard);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
